{"version":3,"sources":["components/appHeader/AppHeader.js","components/spinner/Spinner.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/App.js","index.js"],"names":["AppHeader","className","href","Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","ErrorMessage","styleForImage","diplay","objectFit","src","img","alt","MarvelService","_apiBase","_apiKey","_baseOffset","getResource","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_rtasformCharacter","getCharacter","id","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","RandomChar","props","state","loading","error","marvelService","onCharLoaded","setState","onCharLoading","onError","updateChar","Math","floor","random","then","catch","this","clearInterval","timerId","errorMessage","spinner","content","onClick","mjolnir","Component","View","imgStyle","CharList","charList","newItemLoading","charEnded","onRequest","onCharListLoading","onCharListLoaded","newCharList","ended","length","itemRefs","setRef","ref","push","focusOnItem","forEach","item","classList","remove","add","focus","arr","i","tabIndex","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","CharInfo","charId","prevProps","prevState","skeleton","ErrorBoundary","errorInfo","console","log","children","App","selectedChar","decoration","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af0275c3.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","const Spinner = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{margin: '0 auto', background: 'none', display: 'block'}} width=\"175px\" height=\"175px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <g transform=\"translate(80,50)\">\r\n            <g transform=\"rotate(0)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\r\n            <g transform=\"rotate(45)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(50,80)\">\r\n            <g transform=\"rotate(90)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\r\n            <g transform=\"rotate(135)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(20,50.00000000000001)\">\r\n            <g transform=\"rotate(180)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\r\n            <g transform=\"rotate(225)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(49.99999999999999,20)\">\r\n            <g transform=\"rotate(270)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\r\n            <g transform=\"rotate(315)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\n// Компонент с ошибкой(с сообщением и тд), кот-й мы сможем испол-м где нам нужно\r\nconst ErrorMessage = () => {\r\n    const styleForImage = {diplay: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}\r\n    return (\r\n        // Для работы с папкой public испол-м спец. перем-ю \"окружения\"\r\n        // Если нам в папке src/public понадобится статичный файл то сможем обрат-ся к нему по след-й констр-и\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} />\r\n        <img style={{styleForImage}} \r\n             src={img} alt=\"Error\" \r\n        />\r\n    )\r\n}\r\nexport default ErrorMessage;","\r\n// Сетевая часть кода работающая с сервисом и отвечающая за трасформацию данных \r\nclass MarvelService {\r\n    // Значение св-ва класса начин-ся с _ говорит другим програм  -м что его нельзя менять\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'apikey=345f38814d1f16d5850a85234900ca02';\r\n    // Базовый отступ для наших персонажей\r\n    _baseOffset = 210;\r\n\r\n    // фун-ю getResource возьмем с работы по JS-Food и немного изменим\r\n    // Она нам будет возвращать данные в формате json\r\n    getResource = async (url) => {\r\n        // Тут мы просто делаем запрос через fetch() и дожидаемся его окончания\r\n        let res = await fetch(url);\r\n        // Promise возвращаемый вызовом fetch() не перейдёт в состояние \"отклонено\" из-за ответа HTTP, т.е. не выдаст ошибку!!!\r\n        // и этот момент нам нужно предусмотреть и сделать спец. условие\r\n        if (!res.ok) {\r\n            // во внутрь объектa ошибки new Error в () помещаем текст ошибки\r\n            // и чтобы эта ошибка выпала из фун-и есть спец. оператор throw, т.е. мы выкидываем новую ошибку\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n        // далее трансфор-м данные получ-е выше с перем-й в обычный json-объект\r\n        return await res.json();\r\n    }\r\n\r\n    // Будем делать запросы к нашему API и ниже мы добавим методы кот-е будут этим заниматься\r\n    \r\n    // - Метод для получения всех персонажей + добавляем функционал дозагрузки(Lesson 154)\r\n    // Где агрументом будет offset = this._baseOffset - это позволит фун-и быть более гибкой\r\n    // Т.к. она будет оттал-ся от аргумента, а если аргумент мы не передаем то тогда будет испол-ся базовый отступ в _baseOffset\r\n    getAllCharacters = async (offset = this._baseOffset) => {\r\n        // Фун-я ниже отдаст нам данные в формате json. Сформируем запрос\r\n        // Адресс берем из Request URL с сайта marvel\r\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n        // res это большой объект в которой есть массив с нашими результатами\r\n        // (this._rtasformCharacter) таким образом мы перед-м callback фун-ю кот-я будет что-то делать с \r\n        // элементами что приходят к ней по очереди. В итоге сфор-ся массив с обьектами\r\n        return res.data.results.map(this._rtasformCharacter);\r\n    }\r\n\r\n    // - Метод где получим одного определенного персонажа, далее испол-м метод в файле index.js\r\n    // Чтобы фун-я правильно отрабатывала нужно сделать ее асинх-й\r\n    // Когда метод будет запус-ся он будет ждать ответа и уже результат запишет в перем-ю res\r\n    getCharacter = async (id) => {\r\n        // Фун-я ниже отдаст нам данные в формате json. Сформируем запрос\r\n        // Адресс берем из Request URL с сайта marvel\r\n        // return this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n\r\n        // console.log(res); \r\n        // {id: 1011227, name: 'Amadeus Cho', description: '', modified: '2013-08-07T13:50:56-0400', thumbnail: {…}, …}\r\n        // thumbnail: {path: 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg', extension: 'jpg'} - заглушка\r\n        // thumbnail: {path: 'http://i.annihil.us/u/prod/marvel/i/mg/9/80/4ce5a6f45075d', extension: 'jpg'} - картинка\r\n\r\n        // передадим полученный обьект из перем-й res в метод _rtasformCharacter для нужной нам трасформации\r\n        // и теперь нам вернется объект только с теми данными что нужны\r\n        return this._rtasformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    // - Метод по транформации данных. Тут мы будем получать какие-то данные и возвращать уже трансф-й объект\r\n    // На входе мы получаем обьект, а возвращать будем уже модифиц-й и в нужном нам виде. \r\n    _rtasformCharacter = (char) => {\r\n        // console.log(char.thumbnail.path);\r\n        return {\r\n            // где data - это данные полученные от сервера, \r\n            // в results - нах-ся массив с данными(что там лежит можно увидеть в докум-и на сайте marvel)\r\n            // в data.results[0].name находится - \"3-D Man\"\r\n\r\n            // Вытащим из данных уникальный ключ-id персонажа и далее испол-м его уже в CharList\r\n            id: char.id,\r\n            name: char.name,\r\n            // description: char.description,\r\n            // description: 'Some text, Some text, Some text, Some text',\r\n            // Д/З - если нет описания, доб-ть соот-й текст, если есть сократить его и добавить ...\r\n            description: (char.description) ? `${char.description.slice(0, 210)}...` : 'No description about character',\r\n            // В объекте ниже у нас находится 2 св-ва, это \"path\" с адресом и \"extension\" с расширением картинки\r\n            // и ниже мы сформ-м единый путь к картинке, испол-м конкатенацию(соед-е) строк\r\n            thumbnail: char.thumbnail.path + '.' +  char.thumbnail.extension,\r\n            // В \"urls\" у нас находится массив с объектами внутри, в кот-х нах-ся св-ва \"type\" и \"url\"\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            // В API у нас также есть большой объект comics и там нас интересует большой массив(items) с объектами данных\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n}\r\n\r\nexport default MarvelService; \r\n\r\n// slice() in work\r\n// const text = 'My name is Dmytro';\r\n// console.log(text.slice(0, 13));   // My name is Dm","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { Component } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\n// Ниже просто запишем адресс(путь) к ресурсу в перм-ю и далее будем его испол-ть в src \nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\n// Здесь мы испол-м резул-ты работы сетевого компонета MarvelService\n// Данный компонент отвечает за отображения рандомного персонажа у нас на странице\nclass RandomChar extends Component {\n    // Вызовем созданный ниже по иерархии метод updateChar. Вызов методов которые общаются с сервером и тд и \n    // созд-х ниже по иерархии может вызывать ошибки и это мы в будущем исправим\n    constructor(props) {\n        super(props);\n        // this.updateChar();\n        // console.log('constructor');\n    }\n\n    // Испол-м синтаксис полей класса, для этого испол-м state содер-й некот-е данные\n    // Названия данных берем с /v1/public/characters/{characterId} на сайте\n    // где thumbnail это наша превьюшка(картинка), сост. из адреса к файлу и расширения(jpg)\n    // homepage и wiki это наши кнопки\n    state = {\n        char: {},\n        loading: true,\n        error: false\n    }\n\n    // Создадим новое св-во внутри класса(испол-я синтаксис полей классов)\n    // Аналог this.marvelService внутрь котрого помещён конструктор\n    marvelService = new MarvelService();\n\n    // Lesson 151 Жизненный цикл(этап) компонентов\n\n    // Монтирование, т.е. загрузка компонента\n    componentDidMount() {\n        // this.foo.bar = 0;\n        // После переноса метода updateChar с constructor в componentDidMount() у нас исчезла ошибка в консоли\n        // и дублирование запроса\n        this.updateChar();\n        // this.timerId = setInterval(this.updateChar, 10000);\n        // console.log('mount');\n    }\n\n    // componentDidUpdate() { console.log('update') }\n\n    // Хук ниже запускается тогда когда компонент исчезает со страницы\n    componentWillUnmount() {\n        clearInterval(this.timerId);\n        // console.log('unmount')\n    }\n\n    // Если персонаж загрузился то выполняем след-е и\n    onCharLoaded = (char) => {\n        // console.log('update');\n        // Как только загружаются данные у нас, позиция loading будет false\n        this.setState({\n            char, \n            loading: false\n        })\n    }\n\n    // Метод добав-т спинер перед загрузкой персонажа когда кликаем на TRY IT\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    // Метод кот-й устан-т ошибку\n    onError = () => {\n        this.setState({\n            // Если произошла ошибка, то нет загрузки\n            loading: false,\n            error: true\n        })\n    }\n\n    // Создадим метод кот-й будет обращ-ся к серверу, получать данные и записывать их в state\n    updateChar = () => {\n        // Реализуем наш случайный идентификатор, котрый будет принимать рандомный \"персонаж\" с данных\n        // const id = 1011005;\n        // округлим наш id(чтобы было целое число без дробей) испол-м Math.floor()\n        // Также создадим случайное число в опред-м диапазоне чисел(формула гуглится и испол-сь в д/з с React State counter)\n        // где 1011000 это мин. значение диапазона\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        // const id = Math.floor(Math.random() * (1010789 - 1009146) + 1009146);\n\n        // Перед тем как выполнится запрос ставим спинер\n        this.onCharLoading();\n\n        this.marvelService \n            .getCharacter(id)\n            // Из методы getCharacter возвр-ся нужный нам обьект, далее он идет аргументом(res) в коллбек фун-ю ниже\n            // и мы его сразу же передаем в setState\n            .then(this.onCharLoaded)\n            // Испол-и метод кот-й выкинет ошибку\n            .catch(this.onError);\n    }\n\n    render() {\n        // console.log('render');\n        // Из св-ва char вытаскиваем след-е сущности(т.к. они лежат внутри него)\n        const {char, loading, error} = this.state;\n        // Если в прил-и ошибка то помещаем соот. компонент, либо ничего\n        // Тоесть в перем-й у нас будет содер-ся либо ничего, либо компонент с ошибкой\n        const errorMessage = error ? <ErrorMessage/> : null;\n        // Если в компоненте есть загрузка то возвр-м компонент со спиннером\n        const spinner = loading ? <Spinner/> : null;\n        // Контент должен помещ-ся на стр-цу когда нет уже загрузки и при этом нет ошибки\n        // Если нет загрузки или нет ошибки то показываем компонет View\n        const content = !(loading || error) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {/* Если компонент загружается прямо сейчас то вернем <Spinner/>, если нет то \n                компонету View как property(св-во) передадим char */}\n                {/* {loading ? <Spinner/> : <View char={char}/>} */}\n\n                {/* Если у нас в перем-й будет null то на стр-це ничего не отрендерится! */}\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    {/* Д/З При нажатии на кнопку открывается рандомный персонаж onClick={() => {this.updateChar()}} */}\n                    <button className=\"button button__main\" onClick={this.updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n    \n}\n\n// Этот компонент будет просто отображать кусочек верстки, где char это все данные по персонажу\n// Это будет у нас простой рендарящий компонент, без логики. Он просто получает объект с данными и \n// возвр-т часть верстки просто для отображения, а вся логипка идет в осн. компоненте RandomChar\nconst View = ({char}) => {\n    // Где name, description и тд мы вытаскиваем из char\n    const {name, description, thumbnail, homepage, wiki} = char;\n    // Д/З - Динамически изменять стили когда есть картинка и когда заглушка\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                {/* <p className=\"randomchar__descr\">{(description) ? `${description.slice(0, 210)}...` : 'No description about character'}</p> */}\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n// import abyss from '../../resources/img/abyss.jpg';\n\n\n\nclass CharList extends Component {\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        // Это св-во будет вызываться вручную, после вызова onRequest\n        newItemLoading: false,\n        // Когда запрос на сервер завершен успешно, мы число 210 должны увел-ть на число персонажей кот-е нам пришло\n        offset: 1543,\n        charEnded: false\n    }\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        // this.foo.bar = 0;\n        // this.marvelService.getAllCharacters()\n        //     .then(this.onCharListLoaded)\n        //     .catch(this.onError)\n        this.onRequest();\n    }\n\n    // Создадим метод отвечающий за запрос на сервер, (для реал-и функционала кнопки Load More)\n    onRequest = (offset) => {\n        this.onCharListLoading();\n        this.marvelService.getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n    }\n\n    // Запустился запрос и что-то грузится\n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true\n        })\n    }\n\n    // Загрузились новые данные, где newCharList - это новые получ-е данные и из них мы будем формир-ть новое состояние charList\n    onCharListLoaded = (newCharList) => {\n        // Запишем новый state кот-й будет удалять нашу кнопку если он true\n        let ended  = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        this.setState(({offset, charList}) => ({\n            // Где изначально в ...charList будет пустой массив, но когда наши персонажи уже загруз-сь, \n            // мы charList формир-м из тех персонаей что были(9 старых) + еще 9 новых и в итоге они сложаться в новый массив\n            // и далее объедин-й массив(charList) пойдет уже в верстку\n            charList: [...charList, ...newCharList ], \n            loading: false,\n            newItemLoading: false,\n            // Увеличиваем кол-во пришедших от сервера персонажей на 9\n            offset: offset + 9,\n            charEnded: ended\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    // Lesson 159 Рефы Д/З\n    itemRefs = [];\n    setRef = (ref) => {\n        this.itemRefs.push(ref);\n    }\n    focusOnItem = (id) => {\n        // вариант и с классом и с фокусом, но в теории можно оставить только фокус, \n        // и его в стилях использовать вместо класса.\n        // По возможности, не злоупотреблять рефами, только в крайних случаях\n        this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n        this.itemRefs[id].classList.add('char__item_selected');\n        this.itemRefs[id].focus();\n    }\n\n\n    // Метод создан для оптимизации, чтобы не помещать конст-ю в render\n    renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            // console.log(item.id);\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                // Ключ по id мы достаем из API\n                // у каждого персонажа он свой и достается он внутри MarvelService\n                <li className=\"char__item\" \n                    tabIndex={0}\n                    ref={this.setRef}\n                    key={item.id}\n                    onClick={() => {\n                        this.props.onCharSelected(item.id); \n                        this.focusOnItem(i);\n                    }}\n                    // Событие onkeypress стоит между onkeydown и onkeyup, т.к. оно возникает при нажатии клавиши клавиатуры\n                    // Работает с tab, enter\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            this.props.onCharSelected(item.id);\n                            this.focusOnItem(i);\n                        }\n                    }}   \n                >\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    render () {\n        const {charList, loading, error, offset, newItemLoading, charEnded} = this.state;\n        const items = this.renderItems(charList);\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button \n                    className=\"button button__main button__long\"\n                    // Атрибут disabled устан-м в зав-ти от нашего св-ва newItemLoading\n                    disabled={newItemLoading}\n                    // формир-м новый объект с условием, значение которого(none/block) запиш-ся в display\n                    // В рез-те если нечего больше будет грузить, то кнопка исчезнет\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    // Аргументом в колбек фун-и будет текущее состояние offset\n                    onClick={ () => this.onRequest(offset) }>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\nCharList.propTypes = {\n    // Проверка на обязательное значение, тип функция(у нас метод)\n    onCharSelected: PropTypes.func.isRequired\n}\n\n    \n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\n\nclass CharInfo extends Component {\n    state = {\n        char: null,\n        // Т.к. загрузка пойдет только по действию от пользователя то загрузку ставим в позицию false\n        loading: false,\n        error: false\n    }\n\n    marvelService = new MarvelService();\n\n    // Метод ниже вызывается после того как компонент был создан на странице и это хороший момент для \n    // работ с запросами на сервер и делать что-то асинхронное для работы с нашим API\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    // Когда в компонент приходит новый пропс, он должен перерен-ся и мы должны отловить этот момент обновления\n    // получить новые данные и вставить их в верстку(интерфейс). И тут нам поможет комп-т жизн.цикла componentDidUpdate\n    // Он принимает в себя 3 аргумента, 2 мы расссмотрим, а 3-й испол-ся редко\n    // Он как аргументы принимает в себя пред.состояние и пред.пропсы\n    componentDidUpdate(prevProps, prevState) {\n        // Если в этом компоненте мы не пропишем условие ниже, то при вызове(клике) на персонажа мы получим\n        // множенственные вызовы на сервер и ошибку в результате\n        if(this.props.charId !== prevProps.charId) {\n            this.updateChar();\n        }\n    }\n\n    // Lesson 153 Хук componentDidCatch() вызыв-ся тогда, когда в компоненте произошла ошибка\n    // и принимает он 2 аргумента, где err это сама ошибка, а info это инфор-я о том компоненте где произошла ошибка\n    // componentDidCatch(err, info) {\n    //     console.log(err, info);\n    //     this.setState({error: true});\n    // }\n\n\n    // Метод меняющий наши персонажи по клику на них\n    updateChar = () => {\n        // Деструктуририруем наш charId из пропсов\n        const {charId} = this.props;\n        // Если его не будет, то просто останавливаем его\n        if (!charId) {\n            return;\n        }\n        // Чтобы перед нашим запросом показывался спинер\n        this.onCharLoading();\n\n        // Если уникал-й id уже есть то будем делать запрос на сервер, \n        // обращаемся к серверу marvelService в котором есть метод getCharacter\n        // Когда прийдет ответ от сервиса(marvelService), в формате объекта с персонажем(getCharacter)\n        // то он попадет в onCharLoaded в качестве аргумента (char) и запишется в состояние(setState)\n        // Ну а если произошла ошибка, то вызываем метод с ошибкой\n        this.marvelService\n            .getCharacter(charId)\n            // И далее орабатываем ответ через then() и catch()\n            .then(this.onCharLoaded)\n            .catch(this.onError);\n            // Создадим специально ошибку, в несуществующий метод запишем значение\n            // this.foo.bar = 0;\n    }\n\n    onCharLoaded = (char) => {\n        this.setState({\n            char, \n            loading: false\n        })\n    }\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    render() {\n        // Вытаскиваем все сущности из нашего стейта\n        const {char, loading, error} = this.state;\n\n        // Если у нас не загружен персонаж, нет загрузки и нет ошибки, т.е. если у нас что-то из\n        // перечисленного есть, то мы ничего не рендерим(null), в противном случае отображаем компонент скелетона\n        const skeleton = char || loading || error ? null : <Skeleton/>\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        // Если у нас идет не загрузка, не ошибка и есть уже персонаж\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {/* В зависимости от нашего стейта у нас отобразится один из компонентов */}\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n}\n\n// Чтобы верстка не была громоздкой разделим её на 2 компонента, 1.занимается интерфейсом, 2.логикой и состоянием\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    // console.log(comics);\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        // Далее испол-м React-фрагмент\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\"> \n                {/* Д/З №2 если комиксов нет, уведомить про это, мой вариант */}\n                    {/* {(comics.length === 0) ? 'No comics for this character' : null} */}\n                    {/* Вариант Ивана: {comics.length > 0 ? null : 'There is no comics with this character'} */}\n\n                    {/*В лог-м контексте 0 и есть false, значит можно и не срав-ть с 0! */}\n                    {!comics.length ? 'No comics for this character' : null}\n\n                    {\n                        comics.map((item, i) => {\n                            // Д/З №1 отобразить только 10 комиксов, мой вариант\n                            // if (i >= 0 && i <= 9) { return (<li key={i} className=\"char__comics-item\">{item.name}</li>)}\n                            if (i > 9) return;\n                            return ( \n                                <li key={i} className=\"char__comics-item\"> \n                                    {item.name} \n                                </li> \n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\n// Lesson 155 Проверка типов с помощью PropTypes\nCharInfo.propTypes = {\n    // В объекте мы будем записывать как св-во название того props что приходит(например charId) \n    // и значением этого св-ва запишем его валидацию, т.е. чем оно должно являться\n    // и для этого испол-м сущность PropTypes(импортируемую в начале файла)\n    // PropTypes.number - значит что charId у нас обязательно должен быть числом\n    // и если это так и есть то при клике на персонаж в консоле мы ничего не увидим\n    // А если запишем: charId: PropTypes.string то будет ошибка и увидим соот. уведом-е:\n    // index.js:1 Warning: Failed prop type: Invalid prop `charId` of type `number` supplied to `CharInfo`, expected `string`.\n    // Т.е. мы получили число а, должна быть строка.\n    // В тех документации мы увидим боль-е количество возможных примеров проверок:\n    // https://ru.reactjs.org/docs/typechecking-with-proptypes.html\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n// Это как раз тот компонент, кот-й будет ловить ошибку\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // Метод static getDerivedStateFromError() обновляет только state, т.е. наше состояние и всё\r\n    // Это как бы аналог setState который работает только с ошибкой\r\n    // Метод возвращает объект с новым state кот-й будет записан в state выше\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error: true};\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState( {\r\n            error: true\r\n        })\r\n    }\r\n    // Далее отобразим эту ошибку\r\n    render() {\r\n        if (this.state.error) {\r\n            // return <h2>Something went wrong</h2>\r\n            // Вариант ниже для отображения гифки ошибки\r\n            return <ErrorMessage/>\r\n        }\r\n        // Далее мы должны поместить во внутрь компонент, кот-й может сломаться\r\n        // Констр-ю this.props.children мы пройдем через несколько уроков, \r\n        // пока это просто компонент перед-й во внутрь другого компонента(его ребёнок)\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from \"react\";\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nclass App extends Component {\n    state = {\n        selectedChar: null\n    }\n    // Далее установим метод устанав-й selectedChar.\n    // Используем метод поднятия состояния, когда мы описываем свойство в state(selectedChar)\n    // и далее созд-м метод(onCharSelected) чтобы устанавливать это св-во через аргумент(id)\n    // и далее этот метод мы передадим в <CharList/>, под названием onCharSelected\n    onCharSelected = (id) => {\n        this.setState({\n            selectedChar: id\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <AppHeader/>\n                <main>\n                    {/* Компонент который может сломаться стоит обернуть в \"предохранитель\", у нас это ErrorBoundary */}\n                    <ErrorBoundary>\n                        <RandomChar/>\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                    <ErrorBoundary>\n                        <CharList onCharSelected={this.onCharSelected}/>\n                    </ErrorBoundary>\n                        {/* А в CharInfo будем уже передавать id из state. \n                        Т.е из onCharSelected приходит, далее устанав-ся в state и далее перед-ся в компонент CharInfo*/}\n                        {/* <CharInfo charId={this.state.selectedChar}/> */}\n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar}/>\n                        </ErrorBoundary>\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n                </main>\n            </div>\n        )\n    }  \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n// import MarvelService from './services/MarvelService';\n\nimport './style/style.scss';\n\n\n// Для работы с классами нужно создать его экземпляр и теперь в marvelService будет хранится потомок нашего класса\n// const marvelService = new MarvelService();\n// Сделаем запрос на сервер полученные данные выведем в консоль\n// marvelService.getAllCharacters().then(res => console.log(res));\n// Где в () вписываем id персонажа\n// marvelService.getCharacter(1011052).then(res => console.log(res));\n\n// Переберем массив полученных данных и выведем только имена\n// marvelService.getAllCharacters().then(res => res.data.results.forEach(item => console.log(item.name)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}